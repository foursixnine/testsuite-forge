#!/usr/bin/env python3
import sys
import argparse
import logging

# create log
log = logging.getLogger("backdoor-analisys")
log.setLevel(logging.DEBUG)

fh = logging.FileHandler("backdoor-scan.log")
fh.setLevel(logging.ERROR)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)

# create formatter
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# add formatter to ch
ch.setFormatter(formatter)
fh.setFormatter(formatter)

# add ch to logger
log.addHandler(ch)
log.addHandler(fh)

# use a bitmask as exit code
CODE = 0


def scan_file(filehandle):
    # patch .so
    with filehandle as f:
        lzma = f.read()  # f.read()
        f.close()
    if func not in lzma:
        log.info(
            "%s is not vulnerable to CVE-2024-309 with key %s"
            % (filehandle.name, func.hex())
        )
        return False
    log.error(
        "%s is vulnerable to CVE-2024-309 with key %s" % (filehandle.name, func.hex())
    )
    return True


parser = argparse.ArgumentParser(
    description="Scan for CVE-2024-309 in a file by checking for a the known key.",
    epilog="Exit code is a bitmask of the files scanned. 1 is vulnerable, 0 is not.",
)
parser.add_argument(
    "targets",
    help="Path to the file to scan",
    type=argparse.FileType("rb"),
    action="append",
    nargs="+",
)
targets = parser.parse_args().targets[0]
log.info(f"Scanning {len(targets)}")

# generate_key bytes from backdoored v5.6.0
# source: https://github.com/amlweems/xzbot/blob/main/patch.py
func = bytearray.fromhex(
    "f30f1efa4885ff0f848e000000415455"
    "534889f34881eca00000004885f67504"
    "31c0eb6b4c8b4e084d85c974f34889e2"
    "31c0488d6c24304989fcb90c00000048"
    "89d74989e8be30000000f3abb91c0000"
    "004889eff3ab488d4c24204889d7"
)

scanned_files = len(targets)
vulnerable_files = []

for i, target in enumerate(targets):
    if scan_file(target):
        CODE |= 1 << i
        vulnerable_files.append(target.name)

log.info(f"Scanned {scanned_files} files, infected {len(vulnerable_files)}")
sys.exit(CODE)
